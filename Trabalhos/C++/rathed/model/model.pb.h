// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef PROTOBUF_INCLUDED_model_2eproto
#define PROTOBUF_INCLUDED_model_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_model_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_model_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_model_2eproto();
namespace rathed {
class Datagrama;
class DatagramaDefaultTypeInternal;
extern DatagramaDefaultTypeInternal _Datagrama_default_instance_;
class VectorString;
class VectorStringDefaultTypeInternal;
extern VectorStringDefaultTypeInternal _VectorString_default_instance_;
}  // namespace rathed
namespace google {
namespace protobuf {
template<> ::rathed::Datagrama* Arena::CreateMaybeMessage<::rathed::Datagrama>(Arena*);
template<> ::rathed::VectorString* Arena::CreateMaybeMessage<::rathed::VectorString>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace rathed {

enum DatagramaType {
  ACK = 1,
  SND = 2,
  SYN = 3,
  UPD = 4,
  LST = 5
};
bool DatagramaType_IsValid(int value);
const DatagramaType DatagramaType_MIN = ACK;
const DatagramaType DatagramaType_MAX = LST;
const int DatagramaType_ARRAYSIZE = DatagramaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DatagramaType_descriptor();
inline const ::std::string& DatagramaType_Name(DatagramaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DatagramaType_descriptor(), value);
}
inline bool DatagramaType_Parse(
    const ::std::string& name, DatagramaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DatagramaType>(
    DatagramaType_descriptor(), name, value);
}
// ===================================================================

class Datagrama final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rathed.Datagrama) */ {
 public:
  Datagrama();
  virtual ~Datagrama();

  Datagrama(const Datagrama& from);

  inline Datagrama& operator=(const Datagrama& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Datagrama(Datagrama&& from) noexcept
    : Datagrama() {
    *this = ::std::move(from);
  }

  inline Datagrama& operator=(Datagrama&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Datagrama& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Datagrama* internal_default_instance() {
    return reinterpret_cast<const Datagrama*>(
               &_Datagrama_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Datagrama* other);
  friend void swap(Datagrama& a, Datagrama& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Datagrama* New() const final {
    return CreateMaybeMessage<Datagrama>(nullptr);
  }

  Datagrama* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Datagrama>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Datagrama& from);
  void MergeFrom(const Datagrama& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Datagrama* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes Data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required int32 PackNumber = 2;
  bool has_packnumber() const;
  void clear_packnumber();
  static const int kPackNumberFieldNumber = 2;
  ::google::protobuf::int32 packnumber() const;
  void set_packnumber(::google::protobuf::int32 value);

  // required .rathed.DatagramaType Type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::rathed::DatagramaType type() const;
  void set_type(::rathed::DatagramaType value);

  // @@protoc_insertion_point(class_scope:rathed.Datagrama)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 packnumber_;
  int type_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class VectorString final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rathed.VectorString) */ {
 public:
  VectorString();
  virtual ~VectorString();

  VectorString(const VectorString& from);

  inline VectorString& operator=(const VectorString& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VectorString(VectorString&& from) noexcept
    : VectorString() {
    *this = ::std::move(from);
  }

  inline VectorString& operator=(VectorString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VectorString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VectorString* internal_default_instance() {
    return reinterpret_cast<const VectorString*>(
               &_VectorString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VectorString* other);
  friend void swap(VectorString& a, VectorString& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VectorString* New() const final {
    return CreateMaybeMessage<VectorString>(nullptr);
  }

  VectorString* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VectorString>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VectorString& from);
  void MergeFrom(const VectorString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string peers = 1;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 1;
  const ::std::string& peers(int index) const;
  ::std::string* mutable_peers(int index);
  void set_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_peers(int index, ::std::string&& value);
  #endif
  void set_peers(int index, const char* value);
  void set_peers(int index, const char* value, size_t size);
  ::std::string* add_peers();
  void add_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_peers(::std::string&& value);
  #endif
  void add_peers(const char* value);
  void add_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& peers() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_peers();

  // @@protoc_insertion_point(class_scope:rathed.VectorString)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> peers_;
  friend struct ::TableStruct_model_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Datagrama

// required .rathed.DatagramaType Type = 1;
inline bool Datagrama::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Datagrama::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::rathed::DatagramaType Datagrama::type() const {
  // @@protoc_insertion_point(field_get:rathed.Datagrama.Type)
  return static_cast< ::rathed::DatagramaType >(type_);
}
inline void Datagrama::set_type(::rathed::DatagramaType value) {
  assert(::rathed::DatagramaType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:rathed.Datagrama.Type)
}

// required int32 PackNumber = 2;
inline bool Datagrama::has_packnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Datagrama::clear_packnumber() {
  packnumber_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 Datagrama::packnumber() const {
  // @@protoc_insertion_point(field_get:rathed.Datagrama.PackNumber)
  return packnumber_;
}
inline void Datagrama::set_packnumber(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  packnumber_ = value;
  // @@protoc_insertion_point(field_set:rathed.Datagrama.PackNumber)
}

// required bytes Data = 3;
inline bool Datagrama::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Datagrama::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Datagrama::data() const {
  // @@protoc_insertion_point(field_get:rathed.Datagrama.Data)
  return data_.GetNoArena();
}
inline void Datagrama::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rathed.Datagrama.Data)
}
#if LANG_CXX11
inline void Datagrama::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rathed.Datagrama.Data)
}
#endif
inline void Datagrama::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rathed.Datagrama.Data)
}
inline void Datagrama::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rathed.Datagrama.Data)
}
inline ::std::string* Datagrama::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:rathed.Datagrama.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Datagrama::release_data() {
  // @@protoc_insertion_point(field_release:rathed.Datagrama.Data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Datagrama::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:rathed.Datagrama.Data)
}

// -------------------------------------------------------------------

// VectorString

// repeated string peers = 1;
inline int VectorString::peers_size() const {
  return peers_.size();
}
inline void VectorString::clear_peers() {
  peers_.Clear();
}
inline const ::std::string& VectorString::peers(int index) const {
  // @@protoc_insertion_point(field_get:rathed.VectorString.peers)
  return peers_.Get(index);
}
inline ::std::string* VectorString::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:rathed.VectorString.peers)
  return peers_.Mutable(index);
}
inline void VectorString::set_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rathed.VectorString.peers)
  peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VectorString::set_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:rathed.VectorString.peers)
  peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VectorString::set_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rathed.VectorString.peers)
}
inline void VectorString::set_peers(int index, const char* value, size_t size) {
  peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rathed.VectorString.peers)
}
inline ::std::string* VectorString::add_peers() {
  // @@protoc_insertion_point(field_add_mutable:rathed.VectorString.peers)
  return peers_.Add();
}
inline void VectorString::add_peers(const ::std::string& value) {
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rathed.VectorString.peers)
}
#if LANG_CXX11
inline void VectorString::add_peers(::std::string&& value) {
  peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rathed.VectorString.peers)
}
#endif
inline void VectorString::add_peers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rathed.VectorString.peers)
}
inline void VectorString::add_peers(const char* value, size_t size) {
  peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rathed.VectorString.peers)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
VectorString::peers() const {
  // @@protoc_insertion_point(field_list:rathed.VectorString.peers)
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
VectorString::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:rathed.VectorString.peers)
  return &peers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rathed

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rathed::DatagramaType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rathed::DatagramaType>() {
  return ::rathed::DatagramaType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_model_2eproto
